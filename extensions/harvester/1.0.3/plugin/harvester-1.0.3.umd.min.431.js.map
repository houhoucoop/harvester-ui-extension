{"version":3,"file":"harvester-1.0.3.umd.min.431.js","mappings":"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","sources":["webpack://harvester-1.0.3/./mixins/harvester-vm/impl.js","webpack://harvester-1.0.3/./mixins/harvester-vm/index.js"],"sourcesContent":["import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport { OS } from './index';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    hasCloudConfigComment(userScript) {\n      // Check that userData contains: #cloud-config\n      const userDataDoc = userScript ? YAML.parseDocument(userScript) : YAML.parseDocument({});\n      const items = userDataDoc?.contents?.items || [];\n\n      let exist = false;\n\n      if (userDataDoc?.comment === 'cloud-config' || userDataDoc?.comment?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      if (userDataDoc?.commentBefore === 'cloud-config' || userDataDoc?.commentBefore?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      items.map((item) => {\n        const key = item.key;\n\n        if (key?.commentBefore === 'cloud-config' || key?.commentBefore?.includes('cloud-config\\n')) {\n          exist = true;\n        }\n      });\n\n      return exist;\n    },\n\n    getSSHValue(id) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const sshs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      return sshs.find( (O) => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find((type) => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isTpmEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm;\n    },\n\n    isTPMPersistentStateEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm?.persistent;\n    },\n\n    isEFIPersistentStateEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.persistent;\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    isCpuPinning(spec) {\n      return !!spec?.template?.spec?.domain?.cpu?.dedicatedCpuPlacement;\n    },\n\n    getCloudInitNoCloud(spec) {\n      const secret = this.getSecret(spec);\n      let userData = secret?.decodedData?.userdata;\n      let networkData = secret?.decodedData?.networkdata;\n\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n\n      // If the value is not found inside the secret, the data may be written directly in the yaml\n      if (cloudInitNoCloud?.userData) {\n        userData = cloudInitNoCloud.userData;\n        this.saveUserDataAsClearText = true;\n      }\n\n      if (cloudInitNoCloud?.networkData) {\n        networkData = cloudInitNoCloud.networkData;\n        this.saveNetworkDataAsClearText = true;\n      }\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find((s) => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find((s) => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getRootImageId(vm) {\n      const volumes = parseVolumeClaimTemplates(vm);\n\n      return volumes?.[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getCloudInitNoCloud(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const allSSHs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find((ssh) => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data: id,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find((ssh) => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find((O) => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\n\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\n\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { _CLONE, _CREATE, _VIEW } from '@shell/config/query-params';\nimport {\n  PV, PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT, NAMESPACE, LONGHORN\n} from '@shell/config/types';\nimport { HOSTNAME } from '@shell/config/labels-annotations';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { uniq } from '@shell/utils/array';\nimport {\n  ADD_ONS, SOURCE_TYPE, ACCESS_CREDENTIALS, maintenanceStrategies, runStrategies\n} from '../../config/harvester-map';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\n\nconst LONGHORN_V2_DATA_ENGINE = 'longhorn-system/v2-data-engine';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'SUSE Linux Enterprise',\n  value: 'SLEs'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  match: ['redhat', 'rhel'],\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resourceType: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const inStore = this.$store.getters['currentProduct'].inStore;\n    const hash = {\n      pvs:               this.$store.dispatch(`${ inStore }/findAll`, { type: PV }),\n      pvcs:              this.$store.dispatch(`${ inStore }/findAll`, { type: PVC }),\n      storageClasses:    this.$store.dispatch(`${ inStore }/findAll`, { type: STORAGE_CLASS }),\n      sshs:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SSH }),\n      settings:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SETTING }),\n      images:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.IMAGE }),\n      versions:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_VERSION }),\n      templates:         this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_TEMPLATE }),\n      networkAttachment: this.$store.dispatch(`${ inStore }/findAll`, { type: NETWORK_ATTACHMENT }),\n      vmis:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMI }),\n      vmims:             this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMIM }),\n      vms:               this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM }),\n      secrets:           this.$store.dispatch(`${ inStore }/findAll`, { type: SECRET }),\n      addons:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.ADD_ONS }),\n      longhornV2Engine:  this.$store.dispatch(`${ inStore }/find`, { type: LONGHORN.SETTINGS, id: LONGHORN_V2_DATA_ENGINE }),\n    };\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](NODE)) {\n      hash.nodes = this.$store.dispatch(`${ inStore }/findAll`, { type: NODE });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.CLUSTER_NETWORK)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.CLUSTER_NETWORK });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.VLAN_CONFIG)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VLAN_CONFIG });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](LONGHORN.VOLUMES)) {\n      hash.longhornVolumes = this.$store.dispatch(`${ inStore }/findAll`, { type: LONGHORN.VOLUMES });\n    }\n\n    const res = await allHash(hash);\n\n    const hasPCISchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.PCI_DEVICE);\n    const hasSRIOVGPUSchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.SR_IOVGPU_DEVICE);\n\n    const enabledAddons = res.addons.reduce((acc, addon) => ({ ...acc, [addon.name]: addon.spec?.enabled }), {});\n\n    this.enabledPCI = hasPCISchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER];\n    this.enabledSriovgpu = hasSRIOVGPUSchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER] && enabledAddons[ADD_ONS.NVIDIA_DRIVER_TOOLKIT_CONTROLLER];\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      spec:                          null,\n      osType:                        'linux',\n      sshKey:                        [],\n      maintenanceStrategies,\n      maintenanceStrategy:           'Migrate',\n      runStrategies,\n      runStrategy:                   'RerunOnFailure',\n      installAgent:                  true,\n      hasCreateVolumes:              [],\n      installUSBTablet:              true,\n      networkScript:                 '',\n      userScript:                    '',\n      imageId:                       '',\n      diskRows:                      [],\n      networkRows:                   [],\n      machineType:                   '',\n      secretName:                    '',\n      secretRef:                     null,\n      showAdvanced:                  false,\n      deleteAgent:                   true,\n      memory:                        null,\n      cpu:                           '',\n      reservedMemory:                null,\n      accessCredentials:             [],\n      efiEnabled:                    false,\n      tpmEnabled:                    false,\n      tpmPersistentStateEnabled:     false,\n      efiPersistentStateEnabled:     false,\n      secureBoot:                    false,\n      userDataTemplateId:            '',\n      saveUserDataAsClearText:       false,\n      saveNetworkDataAsClearText:    false,\n      enabledPCI:                    false,\n      enabledSriovgpu:               false,\n      immutableMode:                 this.realMode === _CREATE ? _CREATE : _VIEW,\n      terminationGracePeriodSeconds: '',\n      cpuPinning:                    false,\n    };\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    images() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters[`${ this.inStore }/all`](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters[`${ this.inStore }/all`](SECRET);\n    },\n\n    filteredNamespaces() {\n      return this.$store.getters['harvester/all'](NAMESPACE).filter((namespace) => !namespace.isSystem);\n    },\n\n    nodes() {\n      return this.$store.getters['harvester/all'](NODE);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters[`${ this.inStore }/all`](NODE);\n\n      const networkNames = this.networkRows.map((n) => n.networkName);\n      const vmNetworks = this.$store.getters[`${ this.inStore }/all`](NETWORK_ATTACHMENT);\n      const selectedVMNetworks = networkNames.map((name) => vmNetworks.find((n) => n.id === name)).filter((n) => n?.id);\n      const clusterNetworks = uniq(selectedVMNetworks.map((n) => n.clusterNetworkResource?.id));\n\n      return nodes.filter((N) => !N.isUnSchedulable && N.isEtcd !== 'true').map((node) => {\n        const requireLabelKeys = [];\n        let isNetworkSchedule = true;\n\n        if (clusterNetworks.length > 0) {\n          clusterNetworks.map((clusterNetwork) => {\n            requireLabelKeys.push(`network.harvesterhci.io/${ clusterNetwork }`);\n          });\n        }\n\n        requireLabelKeys.map((requireLabelKey) => {\n          if (node.metadata?.labels?.[requireLabelKey] !== 'true') {\n            isNetworkSchedule = false;\n          }\n        });\n\n        return {\n          label:    isNetworkSchedule ? node.nameDisplay : `${ node.nameDisplay } (${ this.t('harvester.virtualMachine.scheduling.networkNotSupport') })`,\n          value:    node.id,\n          disabled: !isNetworkSchedule,\n        };\n      });\n    },\n\n    defaultStorageClass() {\n      const defaultStorage = this.$store.getters[`${ this.inStore }/all`](STORAGE_CLASS).find( (O) => O.isDefault);\n\n      return defaultStorage;\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || 'Block';\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.resourceType === HCI.VM_VERSION || this.isCreate;\n    },\n\n    defaultTerminationSetting() {\n      const setting = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.VM_TERMINATION_PERIOD) || {};\n\n      return Number(setting?.value || setting?.default);\n    },\n\n    affinityLabels() {\n      return {\n        namespaceInputLabel:      this.t('harvester.virtualMachine.affinity.namespaces.label'),\n        namespaceSelectionLabels: [\n          this.t('harvester.virtualMachine.affinity.thisPodNamespace'),\n          this.t('workload.scheduling.affinity.allNamespaces'),\n          this.t('harvester.virtualMachine.affinity.matchExpressions.inNamespaces')\n        ],\n        addLabel:               this.t('harvester.virtualMachine.affinity.addLabel'),\n        topologyKeyPlaceholder: this.t('harvester.virtualMachine.affinity.topologyKey.placeholder')\n      };\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch(`${ this.inStore }/findAll`, { type: SECRET });\n    this.getInitConfig({ value: this.value, init: this.isCreate });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const {\n        value, existUserData, fromTemplate = false, init = false\n      } = config;\n\n      const vm = this.resourceType === HCI.VM ? value : this.resourceType === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n      const volumeBackups = this.resourceType === HCI.BACKUP ? this.value.status?.volumeBackups : null;\n\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      if (!vm.metadata.labels) {\n        vm.metadata.labels = {};\n      }\n      const maintenanceStrategy = vm.metadata.labels?.[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] || 'Migrate';\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = value.machineType;\n      const cpu = spec.template.spec.domain?.cpu?.cores;\n      const memory = spec.template.spec.domain.resources.limits.memory;\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      const terminationGracePeriodSeconds = spec.template.spec?.terminationGracePeriodSeconds || this.defaultTerminationSetting;\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm, volumeBackups);\n\n      const networkRows = this.getNetworkRows(vm, { fromTemplate, init });\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getCloudInitNoCloud(spec);\n\n      if (this.resourceType === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate && !existUserData && !this.isClone ? this.getInitUserData({ osType }) : userData;\n\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const tpmEnabled = this.isTpmEnabled(spec);\n      const tpmPersistentStateEnabled = this.isTPMPersistentStateEnabled(spec);\n      const efiPersistentStateEnabled = this.isEFIPersistentStateEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n      const cpuPinning = this.isCpuPinning(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this['spec'] = spec;\n      this['maintenanceStrategy'] = maintenanceStrategy;\n      this['runStrategy'] = runStrategy;\n      this['secretRef'] = secretRef;\n      this['accessCredentials'] = accessCredentials;\n      this['userScript'] = userData;\n      this['networkScript'] = networkData;\n\n      this['sshKey'] = sshKey;\n      this['osType'] = osType;\n      this['installAgent'] = installAgent;\n\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n      this['reservedMemory'] = reservedMemory;\n      this['machineType'] = machineType;\n      this['terminationGracePeriodSeconds'] = terminationGracePeriodSeconds;\n\n      this['installUSBTablet'] = installUSBTablet;\n      this['efiEnabled'] = efiEnabled;\n      this['efiPersistentStateEnabled'] = efiPersistentStateEnabled;\n      this['tpmEnabled'] = tpmEnabled;\n      this['tpmPersistentStateEnabled'] = tpmPersistentStateEnabled;\n      this['secureBoot'] = secureBoot;\n      this['cpuPinning'] = cpuPinning;\n\n      this['hasCreateVolumes'] = hasCreateVolumes;\n      this['networkRows'] = networkRows;\n      this['imageId'] = imageId;\n\n      this['diskRows'] = diskRows;\n\n      this.refreshYamlEditor();\n    },\n\n    getDiskRows(vm, volBackups) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = parseVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        let bus = 'virtio';\n        let type = HARD_DISK;\n        let size = '10Gi';\n\n        const imageResource = this.images.find( (I) => this.imageId === I.id);\n\n        const isIsoImage = /iso$/i.test(imageResource?.imageSuffix);\n        const imageSize = Math.max(imageResource?.status?.size, imageResource?.status?.virtualSize);\n        const isEncrypted = imageResource?.isEncrypted || false;\n        const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === 'disk-0') || null ;\n\n        if (isIsoImage) {\n          bus = 'sata';\n          type = CD_ROM;\n        }\n\n        if (imageSize) {\n          let imageSizeGiB = Math.ceil(imageSize / 1024 / 1024 / 1024);\n\n          if (!isIsoImage) {\n            imageSizeGiB = Math.max(imageSizeGiB, 10);\n          }\n          size = `${ imageSizeGiB }Gi`;\n        }\n\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany', // root disk only support LHv1 volume, should be RWX\n          bus,\n          volumeName:       '',\n          size,\n          type,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       'Block',\n          isEncrypted,\n          volumeBackups,\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( (V) => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n          let dataSource = null;\n\n          const type = DISK?.cdrom ? CD_ROM : DISK?.disk ? HARD_DISK : '';\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( (T) => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n              dataSource = dataVolumeSpecPVC?.dataSource;\n            } else {\n              // SOURCE_TYPE.ATTACH_VOLUME\n              // Compatible with VMS that have been created before, Because they're not saved in the annotation\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( (O) => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || 'Block';\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const pvc = this.pvcs.find((P) => P.id === `${ this.value.metadata.namespace }/${ volumeName }`);\n\n          const volumeStatus = pvc?.relatedPV?.metadata?.annotations?.[HCI_ANNOTATIONS.VOLUME_ERROR];\n\n          const isEncrypted = pvc?.isEncrypted || false;\n          const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === DISK.name) || null;\n\n          return {\n            id:         randomStr(5),\n            bootOrder,\n            source,\n            name:       DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }Gi`,\n            volumeMode: volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n            dataSource,\n            namespace,\n            isEncrypted,\n            volumeBackups,\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( (O) => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm, config) {\n      const { fromTemplate = false, init = false } = config;\n\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( (N) => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          newCreateId: (fromTemplate || init) ? randomStr(10) : false,\n          model:       I.model,\n          networkName: isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.spec.template.spec.domain['machine'] = { type: this.machineType };\n      } else {\n        this.spec.template.spec.domain.machine['type'] = this.machineType;\n      }\n\n      this.spec.template.spec.domain.cpu.cores = this.cpu;\n      this.spec.template.spec.domain.resources.limits.cpu = this.cpu ? this.cpu.toString() : this.cpu;\n      this.spec.template.spec.domain.resources.limits.memory = this.memory;\n      this.spec.template.spec.terminationGracePeriodSeconds = this.terminationGracePeriodSeconds;\n\n      // parse reserved memory\n      const vm = this.resourceType === HCI.VM ? this.value : this.value.spec.vm;\n\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n\n      if (this.maintenanceStrategy === 'Migrate') {\n        delete vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY];\n      } else {\n        vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] = this.maintenanceStrategy;\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (!this.secretName || this.needNewSecret) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( (D) => D.name === 'cloudinitdisk') && (this.userData || this.networkData)) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n          const cloudinitdisk = {\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {}\n          };\n\n          if (this.saveUserDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.userData = userData;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.secretRef = { name: this.secretName };\n          }\n\n          if (this.saveNetworkDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.networkData = this.networkScript;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.networkDataSecretRef = { name: this.secretName };\n          }\n\n          volumes.push(cloudinitdisk);\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels: {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resourceType === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.value.metadata['annotations'] = {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        };\n\n        this.value.metadata['labels'] = {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        };\n\n        this.value['spec'] = spec;\n        this['spec'] = spec;\n      } else if (this.resourceType === HCI.VM_VERSION) {\n        this.value.spec.vm['spec'] = spec;\n        this.value.spec.vm.metadata['annotations'] = {\n          ...this.value.spec.vm.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n        };\n        this.value.spec.vm.metadata['labels'] = {\n          ...this.value.spec.vm.metadata.labels,\n          [HCI_ANNOTATIONS.OS]: this.osType\n        };\n        this['spec'] = spec;\n      }\n    },\n\n    removeTrailingHyphen(str) {\n      while (str.endsWith('-')) {\n        str = str.slice(0, -1);\n      }\n\n      return str;\n    },\n\n    multiVMScheduler(spec) {\n      const namePrefix = this.removeTrailingHyphen(this.namePrefix);\n\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.spec.template['spec'] = spec;\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getMaintenanceStrategyOptionLabel(opt) {\n      return this.t(`harvester.virtualMachine.maintenanceStrategy.options.${ opt.label || opt }`);\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decided by the\n     * \"Install guest agent\", \"OS type\", \"SSH keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        return userDataYaml;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this['sshKey'] = neu;\n    },\n\n    updateCpuMemory(cpu, memory) {\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }Gi`;\n      }\n\n      const out = {\n        metadata: { name: dataVolumeName },\n        spec:     {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      if (R.dataSource) {\n        out.spec.dataSource = R.dataSource;\n      }\n\n      switch (R.source) {\n      case SOURCE_TYPE.ATTACH_VOLUME:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( (I) => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = image.storageClassName;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( (id) => this.getSSHValue(id)).filter( (O) => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resourceType === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      if (!secret && this.isEdit && this.secretRef) {\n        // When editing the vm, if the userData and networkData are deleted, we also need to clean up the secret values\n        secret = this.secretRef;\n      }\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          // If none of the data comes from the secret, then no data needs to be saved to the secret\n          if (!this.saveUserDataAsClearText || !this.saveNetworkDataAsClearText) {\n            secret.setData('userdata', this.userData || '');\n            secret.setData('networkdata', this.networkScript || '');\n            await secret.save();\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find((s) => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex((O) => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          delete this.spec.template.spec.domain.devices['inputs'];\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.spec.template.spec.domain.devices['inputs'] = inputs;\n        }\n      }\n    },\n\n    setBootMethod(boot = {\n      efi: false, secureBoot: false, efiPersistentStateEnabled: false\n    }) {\n      if (boot.efi) {\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', boot.secureBoot);\n      } else {\n        delete this.spec.template.spec.domain['firmware'];\n        delete this.spec.template.spec.domain.features['smm'];\n\n        return;\n      }\n\n      if (boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n      } else {\n        try {\n          delete this.spec.template.spec.domain.features.smm['enabled'];\n          const noKeys = Object.keys(this.spec.template.spec.domain.features.smm).length === 0;\n\n          if (noKeys) {\n            delete this.spec.template.spec.domain.features['smm'];\n          }\n        } catch (e) {}\n      }\n\n      if (boot.efiPersistentStateEnabled) {\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.persistent', true);\n      } else {\n        delete this.spec.template.spec.domain.firmware.bootloader.efi['persistent'];\n      }\n    },\n\n    setCpuPinning(value) {\n      if (value) {\n        set(this.spec.template.spec.domain.cpu, 'dedicatedCpuPlacement', true);\n      } else {\n        delete this.spec.template.spec.domain.cpu['dedicatedCpuPlacement'];\n      }\n    },\n\n    setTPM({ tpmEnabled = false, tpmPersistentStateEnabled = false } = {}) {\n      if (tpmEnabled) {\n        set(this.spec.template.spec.domain.devices, 'tpm', tpmPersistentStateEnabled ? { persistent: true } : {});\n      } else {\n        delete this.spec.template.spec.domain.devices['tpm'];\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex((value) => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this['userScript'] = undefined;\n      } else {\n        this['userScript'] = jsyaml.dump(userDataJson);\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this['reservedMemory'] = memory;\n    },\n\n    updateTerminationGracePeriodSeconds(value) {\n      this['terminationGracePeriodSeconds'] = value;\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( (I) => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resourceType !== HCI.BACKUP) {\n          this.secretName = secret?.metadata.name;\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this['sshKey'] = [];\n        this['userScript'] = undefined;\n        this['installAgent'] = false;\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({\n        efi: val, secureBoot: this.secureBoot, efiPersistentStateEnabled: this.efiPersistentStateEnabled\n      });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({\n        efi: this.efiEnabled, secureBoot: val, efiPersistentStateEnabled: this.efiPersistentStateEnabled\n      });\n    },\n\n    efiPersistentStateEnabled(val) {\n      this.setBootMethod({\n        efi: this.efiEnabled, secureBoot: this.secureBoot, efiPersistentStateEnabled: val\n      });\n    },\n\n    cpuPinning(value) {\n      this.setCpuPinning(value);\n    },\n\n    tpmEnabled(val) {\n      this.setTPM({ tpmEnabled: val, tpmPersistentStateEnabled: this.tpmPersistentStateEnabled });\n    },\n\n    tpmPersistentStateEnabled(val) {\n      this.setTPM({ tpmEnabled: this.tpmEnabled, tpmPersistentStateEnabled: val });\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          let out = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n\n          if (neu) {\n            const hasCloudComment = this.hasCloudConfigComment(out);\n\n            if (!hasCloudComment) {\n              out = `#cloud-config\\n${ out }`;\n            }\n          }\n\n          this['userScript'] = out;\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu) {\n      const out = this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this['userScript'] = out;\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      // refresh yaml editor to get the latest userScript\n      this.userScript = this.getUserData({ installAgent: this.installAgent, osType: this.osType });\n      this.refreshYamlEditor();\n\n      const _diff = difference(old, neu);\n\n      if (_diff.length > 0 && this.isCreate) {\n        this.deleteSSHFromUserData(_diff);\n      }\n    }\n  }\n};\n"],"names":["QGA_JSON","package_update","packages","runcmd","QGA_MAP","default","USB_TABLET","bus","name","type","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","methods","hasCloudConfigComment","userScript","userDataDoc","YAML","items","contents","exist","comment","includes","commentBefore","map","item","key","getSSHValue","id","inStore","this","$store","getters","sshs","HCI","SSH","find","O","spec","publicKey","undefined","getOsType","vm","metadata","labels","HCI_ANNOTATIONS","OS","getMatchQGA","osType","_QGA_JSON","clone","hasCustomQGA","forEach","match","getSimilarRuncmd","hasInstallAgent","oldValue","dataFormat","jsyaml","e","Error","S","Array","isArray","join","isInstallUSBTablet","inputs","template","domain","devices","isEqual","isEfiEnabled","firmware","bootloader","efi","isTpmEnabled","tpm","isTPMPersistentStateEnabled","persistent","isEFIPersistentStateEnabled","isSecureBoot","secureBoot","isCpuPinning","cpu","dedicatedCpuPlacement","getCloudInitNoCloud","secret","getSecret","userData","decodedData","userdata","networkData","networkdata","cloudInitNoCloud","volumes","V","saveUserDataAsClearText","saveNetworkDataAsClearText","secrets","SECRET","secretName","secretRef","networkDataSecretRef","s","getAccessCredentials","credentials","accessCredentials","annotations","JSON","parse","DYNAMIC_SSHKEYS_NAMES","c","source","userPassword","out","username","newPassword","users","sshkeys","Object","keys","data","propagationMethod","qemuGuestAgent","getRootImageId","parseVolumeClaimTemplates","IMAGE_ID","getSSHFromAnnotation","ids","SSH_NAMES","convertToJson","script","getSSHFromUserData","ssh_authorized_keys","compareSSHValue","a","b","r","replace","mergeAllSSHs","length","allSSHs","hasSSHResource","ssh","_userDataSSH","sshValue","push","LONGHORN_V2_DATA_ENGINE","MANAGEMENT_NETWORK","label","value","CD_ROM","HARD_DISK","mixins","impl","props","required","resourceType","String","fetch","hash","pvs","dispatch","PV","pvcs","PVC","storageClasses","STORAGE_CLASS","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","addons","ADD_ONS","longhornV2Engine","LONGHORN","SETTINGS","NODE","nodes","CLUSTER_NETWORK","clusterNetworks","VLAN_CONFIG","VOLUMES","longhornVolumes","res","allHash","hasPCISchema","PCI_DEVICE","hasSRIOVGPUSchema","SR_IOVGPU_DEVICE","enabledAddons","reduce","acc","addon","enabled","enabledPCI","PCI_DEVICE_CONTROLLER","enabledSriovgpu","NVIDIA_DRIVER_TOOLKIT_CONTROLLER","isClone","realMode","_CLONE","sshKey","maintenanceStrategies","maintenanceStrategy","runStrategies","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","imageId","diskRows","networkRows","machineType","showAdvanced","deleteAgent","memory","reservedMemory","efiEnabled","tpmEnabled","tpmPersistentStateEnabled","efiPersistentStateEnabled","userDataTemplateId","immutableMode","_CREATE","_VIEW","terminationGracePeriodSeconds","cpuPinning","computed","filteredNamespaces","NAMESPACE","filter","namespace","isSystem","nodesIdOptions","networkNames","n","networkName","vmNetworks","selectedVMNetworks","uniq","clusterNetworkResource","N","isUnSchedulable","isEtcd","node","requireLabelKeys","isNetworkSchedule","clusterNetwork","requireLabelKey","nameDisplay","t","disabled","defaultStorageClass","defaultStorage","isDefault","storageClassSetting","storageClassValue","HCI_SETTING","DEFAULT_STORAGE_CLASS","customVolumeMode","volumeMode","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","defaultTerminationSetting","setting","VM_TERMINATION_PERIOD","Number","affinityLabels","namespaceInputLabel","namespaceSelectionLabels","addLabel","topologyKeyPlaceholder","created","getInitConfig","init","config","existUserData","fromTemplate","BACKUP","status","volumeBackups","resources","limits","requests","VM_MAINTENANCE_MODE_STRATEGY","cores","VM_RESERVED_MEMORY","getDiskRows","getNetworkRows","getHasCreatedVolumes","secretBackups","secretNetworkData","secretUserData","base64Decode","getInitUserData","prototype","hasOwnProperty","call","running","refreshYamlEditor","volBackups","_volumes","_disks","disks","_volumeClaimTemplates","size","imageResource","I","isIsoImage","test","imageSuffix","imageSize","Math","max","virtualSize","isEncrypted","vBackup","volumeName","imageSizeGiB","ceil","randomStr","SOURCE_TYPE","accessMode","storageClassName","image","DISK","index","volume","realName","container","hotpluggable","dataSource","cdrom","disk","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","NEW","dataVolumeSpecPVC","storage","allPVCs","pvcResource","ATTACH_VOLUME","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","pvc","P","volumeStatus","relatedPV","VOLUME_ERROR","sortBy","networks","interfaces","network","sriov","bridge","isPod","pod","newCreateId","model","multus","parseVM","getUserData","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","machine","toString","diskNameLables","volumeClaimTemplates","R","prefixName","dataVolumeName","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","cloudinitdisk","stringify","VM_NAME","isSingle","multiVMScheduler","VOLUME_CLAIM_TEMPLATE","NETWORK_IPS","networkIps","CREATOR","removeTrailingHyphen","str","endsWith","slice","namePrefix","VM_NAME_PREFIX","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","DYNAMIC_SSHKEYS_USERS","row","ACCESS_CREDENTIALS","RESET_PWD","INJECT_SSH","sshPublicKey","from","Set","getMaintenanceStrategyOptionLabel","opt","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","macAddress","updateUserData","updateNetworkData","yaml","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","isMatchProp","userDataYAML","userDataJSON","findIndex","hasSameRuncmd","hasSimilarRuncmd","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","i","splice","getOwnerReferencesFromVM","resource","kind","apiVersion","uid","saveSecret","isEdit","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","saveAccessCredentials","toSave","secretId","keypair","getAccessCredentialsValidation","errors","fieldName","message","val","handlerUSBTablet","hasExist","assign","setBootMethod","boot","features","set","smm","noKeys","setCpuPinning","setTPM","deleteSSHFromUserData","userDataJson","isEmpty","$nextTick","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","updateTerminationGracePeriodSeconds","watch","handler","old","imageOSType","oldImageId","immediate","deep","hasCloudComment","_diff","difference"],"sourceRoot":""}