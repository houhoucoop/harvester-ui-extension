name: Auto Backport Label

on:
  pull_request:
    types: [opened, reopened]

jobs:
  add-backport-label:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch all branches via GitHub API
        id: fetch_release_branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          all_branches=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/branches" | jq -r '.[].name')

          echo "All branches names:"
          echo "$all_branches"

          if [[ -z "$all_branches" ]]; then
            echo "No branches found or failed to fetch."
            echo "should_label=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          release_branches=$(echo "$all_branches" | grep -E '^release-harvester-v[0-9]+\.[0-9]+$' || true)
          echo "Filtered release branches:"
          echo "$release_branches"

          if [[ -z "$release_branches" ]]; then
            echo "No release branches found."
            echo "should_label=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          latest_branch=$(echo "$release_branches" | sort -Vr | head -n1)
          echo "latest_branch=$latest_branch" >> $GITHUB_OUTPUT

      - name: Determine if backport label is required
        id: check_backport_label
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          latest_branch="${{ steps.fetch_release_branches.outputs.latest_branch }}"

          if [[ -z "$latest_branch" ]]; then
            echo "No latest release branch found; skipping backport label."
            echo "should_label=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          version=$(echo "$latest_branch" | sed -E 's/^release-harvester-v//')
          version_with_patch="${version}.0"
          echo "Detected latest release version: $version_with_patch"

          tag_exists=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[].tag_name' | grep -x "v${version_with_patch}" || true)

          if [[ -z "$tag_exists" ]]; then
            echo "Release tag v$version_with_patch not found; backport label required."
            echo "should_label=true" >> $GITHUB_OUTPUT
            echo "backport_label=require backport/v${version}" >> $GITHUB_OUTPUT
          else
            echo "Release tag v$version_with_patch exists; skipping backport label."
            echo "should_label=false" >> $GITHUB_OUTPUT
          fi

      - name: Get existing PR labels
        id: get_pr_labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_number=${{ github.event.pull_request.number }}
          labels=$(gh pr view "$pr_number" --json labels --jq '.labels[].name' || echo "")
          echo "labels=$labels" >> $GITHUB_OUTPUT

      - name: Add backport label if needed
        if: steps.check_backport_label.outputs.should_label == 'true' && !contains(steps.get_pr_labels.outputs.labels, steps.check_backport_label.outputs.backport_label)
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ steps.check_backport_label.outputs.backport_label }}
