name: Build and Push Extension Charts on PR Merge

on:
  push:
    branches:
      - 'release-harvester-v*'
  pull_request:
    branches:
      - 'release-harvester-v*'
    types:
      - merged

defaults:
  run:
    shell: bash
    working-directory: ./

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        uses: ./.github/actions/lint

  setup-target-branch:
    runs-on: ubuntu-latest
    outputs:
      target_branch: ${{ steps.get-version.outputs.target_branch }}
    steps:
      - uses: actions/checkout@v4
      - name: Get the target branch
        id: get-version
        run: |
          echo "Ref name: ${{ github.ref_name }}"
          if [[ "${{ github.ref_name }}" =~ ^release-harvester-v([0-9]+\.[0-9]+)$ ]]; then
            echo "Target branch regex matched"
            echo "target_branch=v${BASH_REMATCH[1]}-head" >> "$GITHUB_ENV"
            echo "target_branch=v${BASH_REMATCH[1]}-head" >> "$GITHUB_OUTPUT"
          else
            echo "Error: Ref name doesn't match the expected pattern"
            exit 1
          fi
      - name: Create target branch if not exists
        run: |
          echo "Checking if target branch exists: ${{ env.target_branch }}"
          git fetch --all
          if ! git rev-parse --verify origin/${{ env.target_branch }} > /dev/null 2>&1; then
            echo "Target branch doesn't exist, creating it"
            git checkout -b "${{ env.target_branch }}"
            git push origin "${{ env.target_branch }}"
          else
            echo "Target branch already exists"
          fi

  build-extension-charts:
    needs: setup-target-branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version-file: '.nvmrc'
      - name: Install dependencies
        run: yarn
      - name: Run build script
        run: yarn publish-pkgs -s ${{ github.repository }} -b ${{ needs.setup-target-branch.outputs.target_branch }}
      - name: Upload charts artifact
        uses: actions/upload-artifact@v4
        with:
          name: charts
          path: tmp

  release:
    needs:
      - setup-target-branch
      - build-extension-charts
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Extract version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Get last commit hash from release-harvester-v1.5
        id: last_commit
        run: |
          echo "Retrieving last commit hash"
          LAST_COMMIT=$(git log -1 --format=%H)
          echo "Last commit hash: $LAST_COMMIT"
          echo "last_commit=$LAST_COMMIT" >> $GITHUB_ENV
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: '${{ needs.setup-target-branch.outputs.target_branch }}'
      - name: Configure Git
        run: |
          echo "Configuring Git user"
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: charts
      - name: Remove previous build
        run: |
          echo "Removing previous build for version ${{ env.VERSION }}"
          rm -rf assets/harvester/harvester-${{ env.VERSION }}.tgz
          rm -rf charts/harvester/${{ env.VERSION }}/
          rm -rf extensions/harvester/${{ env.VERSION }}/
          rm -f index.yaml  # Remove index.yaml from root
      - name: Commit build
        run: |
          echo "Committing build artifacts to branch ${{ needs.setup-target-branch.outputs.target_branch }}"
          git add ./{assets,charts,extensions,index.yaml}
          git commit -m "CI Build Artifacts (Last commit: ${{ env.last_commit }}, Version: ${{ env.VERSION }})"
          git push origin ${{ needs.setup-target-branch.outputs.target_branch }}
      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.4.1
        with:
          charts_dir: ./charts/*
        env:
          CR_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          CR_SKIP_EXISTING: true
